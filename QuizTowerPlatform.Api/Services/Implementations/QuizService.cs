using AutoMapper;
using Microsoft.EntityFrameworkCore;
using QuizTowerPlatform.Api.Models;
using QuizTowerPlatform.Api.Services.Interfaces;
using QuizTowerPlatform.Api.Services.Security;
using QuizTowerPlatform.Data.Context;
using QuizTowerPlatform.Data.DataModels;
using QuizTowerPlatform.Model;

namespace QuizTowerPlatform.Api.Services.Implementations
{
    public class QuizService : IQuizService
    {
        private readonly IMapper mapper;
        private readonly IAchievementService achievementService;

        public QuizService(IMapper mapper, IAchievementService achievementService)
        {
            this.mapper = mapper;
            this.achievementService = achievementService;
        }

        public async Task<int> CreateQuiz(IApiDbContext db, Quiz quiz)
        {
            await db.Quizzes.AddAsync(quiz);
            await db.SaveChangesAsync();

            // Note: After saving, the Id of the quiz will be populated with the value generated by the database. 
            return quiz.Id;
        }

        public async Task DeleteQuiz(IApiDbContext db, int id)
        {
            var quiz = await db.Quizzes.Include(q => q.QuizQuestions).FirstOrDefaultAsync(q => q.Id == id);

            if (quiz == null)
            {
                return;
            }

            db.Quizzes.Remove(quiz);
            db.Questions.RemoveRange(quiz.QuizQuestions);
            await db.SaveChangesAsync();
        }

        public async Task<IEnumerable<Quiz>> AllQuizzes(IApiDbContext db)
        {
            var quizzes = await db.Quizzes.Include(q => q.QuizQuestions).ToListAsync();

            return quizzes;
        }

        public async Task<Quiz> GetQuizById(IApiDbContext db, int id)
        {
            var quiz = await db.Quizzes
                .Include(q => q.QuizQuestions.OrderBy(q => Guid.NewGuid()).Take(10))
                .FirstOrDefaultAsync(q => q.Id == id);

            return quiz;
        }

        public async Task StartQuiz(IApiDbContext db, StartQuizModel model, string username)
        {
            var user = await db.Users.SingleOrDefaultAsync(u => u.UserName == username);
            var quiz = await db.Quizzes
                .Include(q => q.QuizQuestions)
                .SingleOrDefaultAsync(q => q.Id == model.QuizId);

            if (user == null || quiz == null)
            {
                return;
            }

            var questionIds = model.Answers.Select(a => a.QuestionId).ToList();
            var questions = await db.Questions
                .Where(q => questionIds.Contains(q.Id))
                .ToListAsync();

            var results = new UserResult
            {
                UserId = user.Id,
                User = user,
                QuizId = quiz.Id,
                Quiz = quiz,
                UsersCorrectAnswers = 0,
                UsersWrongAnswers = 0
            };

            foreach (var answer in model.Answers)
            {
                var question = questions.SingleOrDefault(q => q.Id == answer.QuestionId);
                if (question != null)
                {
                    if (answer.Answer == question.CorrectAnswer)
                    {
                        results.UsersCorrectAnswers++;
                    }
                    else
                    {
                        results.UsersWrongAnswers++;
                    }
                }
            }

            results.PointsEarned = results.UsersCorrectAnswers;
            if (user.TotalAchievementPoints != null)
            {
                user.TotalAchievementPoints.TotalQuizPoints += results.PointsEarned;
            }

            await db.UserResults.AddAsync(results);

            // TODO: Tower of Quizzes, Check for achievements to ranking UP.

            db.SetCurrentUsername(username);
            await db.SaveChangesAsync();
        }

        public async Task<List<Quiz>> GetSearchingResults(IApiDbContext db, string searchTerm)
        {
            return await db.Quizzes
                .Where(q => q.Name.Contains(searchTerm))
                .Include(q => q.QuizQuestions)
                .OrderByDescending(q => q.Name)
                .ThenByDescending(q => q.QuizQuestions.Count())
                .ToListAsync();
        }
    }
}
